class Node:
    def __init__(self, label, children=None):
        self.label = label
        self.children = children if children is not None else []

    def __str__(self, level=0):
        ret = "\t" * level + self.label + "\n"
        for child in self.children:
            ret += child.__str__(level + 1)
        return ret

def generate_parse_tree(grammar, sentence):
    def parse(start, end, non_terminal):
        if start == end:
            return [Node(non_terminal, [Node(sentence[start])])]
        
        trees = []
        for rule in grammar:
            lhs, rhs = rule
            if lhs == non_terminal and len(rhs) == 2:
                for i in range(start+1, end+1):
                    left_trees = parse(start, i-1, rhs[0])
                    right_trees = parse(i, end, rhs[1])
                    for lt in left_trees:
                        for rt in right_trees:
                            trees.append(Node(non_terminal, [lt, rt]))
        return trees

    trees = parse(0, len(sentence)-1, 'S')
    return trees

# Define a simple context-free grammar
grammar = [
    ('S', ['NP', 'VP']),
    ('NP', ['Det', 'N']),
    ('VP', ['V', 'NP']),
    ('Det', ['the']),
    ('N', ['cat']),
    ('V', ['chased'])
]

# Define a sample sentence
sentence = ['the', 'cat', 'chased']

# Generate parse trees for the sentence using the grammar
parse_trees = generate_parse_tree(grammar, sentence)

# Print out the generated parse trees
for idx, tree in enumerate(parse_trees):
    print(f"Parse Tree {idx + 1}:")
    print(tree)
